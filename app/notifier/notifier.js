'use strict';angular.module('extralife.notifier', ['ngRoute']).config(['$routeProvider', function($routeProvider) {    $routeProvider.when('/notifier', {        templateUrl: 'notifier/notifier.html',        controller: 'NotifierController',        controllerAs: 'nc'    });}])    .service('queryService', ['$http', function($http) {    this.getAllDonations = function(participant) {        return $http({            method: "GET",            url: "http://www.extra-life.org/index.cfm?fuseaction=donordrive.participantDonations&participantID=" + participant + "&format=json"        });    }    this.getDonorInfo = function(participant) {        return $http({            method: "GET",            url: "http://www.extra-life.org/index.cfm?fuseaction=donordrive.participant&participantID=" + participant + "&format=json"        });    }    this.getTeamInfo = function(team) {        return $http({            method: "GET",            url: "http://www.extra-life.org/index.cfm?fuseaction=donorDrive.team&teamID=" + team + "&format=json"        });    }}]).controller('NotifierController', ['$scope', '$timeout', 'queryService', '$filter', NotifierController]);function NotifierController($scope, $timeout, queryService, $filter) {    var nc = this;        nc.allDonations = [];    nc.newDonations = [];    nc.theme = {name: '', font: ''};    nc.fonts = [        {name: 'Abel', font: 'abel'},        {name: 'Amatic SC', font: 'amatic-sc'},        {name: 'Anton', font: 'anton'},        {name: 'Architects Daughter', font: 'architects-daughter'},        {name: 'Dancing Script', font: 'dancing-script'},        {name: 'Indie Flower', font: 'indie-flower'},        {name: 'Lobster', font: 'lobster'},        {name: 'Orbitron', font: 'orbitron'},        {name: 'Poiret One', font: 'poiret-one'},        {name: 'Sigmar One', font: 'sigmar-one'},        {name: 'Ubuntu', font: 'ubuntu'},        {name: 'Yanone Kaffeesatz', font: 'yanone-kaffeesatz'}    ];    nc.isRunning = false;    nc.donationTarget = 100;    nc.donationTotal = 0;    nc.participantID = null;    nc.donationQueryDelay = 15000;    nc.previousDonationWidth = "0%";    nc.newestDonation = null;    nc.chroma = '#07f07f'        nc.checkLatestDonations = function() {        queryService.getAllDonations(nc.participantID).success(function(donations) {            nc.newDonations = donations;            checkForNewDonation();        });    }        function checkForNewDonation() {        nc.newDonations = $filter('orderBy')(nc.newDonations, getDonationDateTime);        if (nc.newDonations.length > nc.allDonations.length) {            nc.newestDonation = nc.newDonations[nc.newDonations.length - 1];        }        nc.allDonations = nc.newDonations;        getTotalDonationAmount();        setNewDonationProgress();        run();    }        function setNewDonationProgress() {        if (nc.newestDonation != null) {            nc.previousDonationWidth = (((nc.donationTotal - nc.newestDonation.donationAmount) / nc.donationTarget) * 100) + "%";            nc.newDonationWidth = ((nc.newestDonation.donationAmount / nc.donationTarget) * 100) + "%";        }        else {            nc.previousDonationWidth = ((nc.donationTotal / nc.donationTarget) * 100) + "%";            nc.newDonationWidth = "0%";        }    }        function getTotalDonationAmount() {        nc.donationTotal = 0;        angular.forEach(nc.allDonations, function(donation) {            nc.donationTotal += donation.donationAmount;        });    }        function getDonationDateTime(item) {        return parseInt(moment(item.createdOn).format("X"));    }        function run() {        $timeout(function(){            if (!nc.isRunning)                return;            nc.checkLatestDonations();        }, nc.donationQueryDelay);    }    nc.start = function() {        queryService.getDonorInfo(nc.participantID).success(function(info) {            nc.donationTarget = parseInt(info.fundraisingGoal);            if (info.teamID != null) {                nc.isTeamCaptain = info.isTeamCaptain;                nc.teamID = info.teamID;                queryService.getTeamInfo(nc.teamID).success(function(team) {                    nc.team = {                        avatar: team.avatarImageURL,                        name: team.name,                        goal: team.fundraisingGoal                    };                });            }            nc.name = info.firstName + " " + info.lastName;            nc.avatar = info.avatarImageURL;        });        if (nc.isRunning)            return;        nc.newestDonation = null;        nc.isRunning = true;        setNewDonationProgress();        run();    }        nc.stop = function() {        nc.isRunning = false;    }}